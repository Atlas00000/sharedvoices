// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  ADMIN
  MODERATOR
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          UserRole  @default(USER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  lastLoginAt   DateTime?

  // Profile fields
  bio           String?   @db.Text
  location      String?
  interests     String[]
  website       String?
  socialLinks   Json?     // Store social media links as JSON
  preferences   Json?     // Store user preferences as JSON

  // Relations
  accounts      Account[]
  sessions      Session[]
  stories       Story[]
  activityLogs  UserActivityLog[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Story {
  id          String      @id @default(cuid())
  title       String
  slug        String      @unique
  content     String
  status      StoryStatus @default(DRAFT)
  publishedAt DateTime?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  author      User        @relation(fields: [authorId], references: [id])
  authorId    String
  categories  Category[]
  tags        Tag[]
}

model Category {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  stories     Story[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Tag {
  id        String   @id @default(cuid())
  name      String   @unique
  stories   Story[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model SystemLog {
  id        String   @id @default(cuid())
  level     LogLevel
  message   String
  details   Json?
  createdAt DateTime @default(now())
}

model UserActivityLog {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  action    String
  details   Json?
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())
}

model Report {
  id          String       @id @default(cuid())
  type        ReportType
  status      ReportStatus @default(OPEN)
  description String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

enum StoryStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum LogLevel {
  ERROR
  WARN
  INFO
  DEBUG
}

enum ReportType {
  CONTENT
  USER
  SYSTEM
}

enum ReportStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
  CLOSED
} 